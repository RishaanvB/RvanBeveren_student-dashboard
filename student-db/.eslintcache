[{"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\index.js":"1","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\App.js":"2","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\RatingCheckboxForm.js":"3","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Navigation\\StudentNav.js":"4","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Navigation\\AssignmentNav.js":"5","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\helperfunctions\\helperFunctions.js":"6","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\AssignmentDetails.js":"7","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\Assignment.js":"8","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\StudentDetails.js":"9","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\Student.js":"10","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\AssignmentsForm.js":"11","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Themes\\ThemeAssignment.js":"12","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Themes\\ThemeStudent.js":"13"},{"size":207,"mtime":1611768258613,"results":"14","hashOfConfig":"15"},{"size":2921,"mtime":1612570954134,"results":"16","hashOfConfig":"15"},{"size":815,"mtime":1612564204328,"results":"17","hashOfConfig":"15"},{"size":857,"mtime":1612571225090,"results":"18","hashOfConfig":"15"},{"size":605,"mtime":1612563373040,"results":"19","hashOfConfig":"15"},{"size":1967,"mtime":1612391786880,"results":"20","hashOfConfig":"15"},{"size":3024,"mtime":1612570217684,"results":"21","hashOfConfig":"15"},{"size":2073,"mtime":1612557115362,"results":"22","hashOfConfig":"15"},{"size":6370,"mtime":1612570392549,"results":"23","hashOfConfig":"15"},{"size":5699,"mtime":1612562809042,"results":"24","hashOfConfig":"15"},{"size":862,"mtime":1612365566057,"results":"25","hashOfConfig":"15"},{"size":5389,"mtime":1612567485691,"results":"26","hashOfConfig":"15"},{"size":5427,"mtime":1612557270120,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"61gl87",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\index.js",[],["61","62"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\App.js",["63","64"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\RatingCheckboxForm.js",[],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Navigation\\StudentNav.js",[],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Navigation\\AssignmentNav.js",[],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\helperfunctions\\helperFunctions.js",[],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\AssignmentDetails.js",["65","66","67","68"],"import { useParams } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n// import Assignment from \"../Components/Assignment\";\r\n// import RatingCheckboxForm from \"../Components/RatingCheckboxForm\";\r\n\r\nimport allStudentsData from \"../helperfunctions/helperFunctions\";\r\nimport {\r\n  VictoryChart,\r\n  VictoryGroup,\r\n  VictoryBar,\r\n  VictoryAxis,\r\n  VictoryLabel,\r\n  VictoryLegend,\r\n  VictoryLine,\r\n  VictoryVoronoiContainer,\r\n  VictoryTooltip\r\n} from \"victory\";\r\nimport theme from \"../Themes/ThemeAssignment\";\r\nconst AssignmentDetails = ({showFunRating,showDifficultyRating, showChartBtnDisplay}) => {\r\n  const { assignment } = useParams();\r\n  showChartBtnDisplay(false)\r\n  const singleAssignmentData = allStudentsData.filter(\r\n    (student) => student.assignment === assignment\r\n  );\r\n  const red = \"#a21232\";\r\n  const blue = \"#1687a7\";\r\n  // console.log(\"assignmentdetauls\");\r\n  // console.log(singleAssignmentData, \"ass\");\r\n  // const [showFunRating, setShowFunRating] = useState(true);\r\n  // const [showDifficultyRating, setShowDifficultyRating] = useState(true);\r\n\r\n  // const toggleShowFunRating = () => setShowFunRating((prev) => !prev);\r\n  // const toggleShowDifficultyRating = () =>\r\n  //   setShowDifficultyRating((prev) => !prev);\r\nconsole.log(singleAssignmentData);\r\nconsole.log(showFunRating);\r\n  return (\r\n    <div>\r\n      <VictoryChart domainPadding={10} theme={theme}>\r\n        <VictoryLegend\r\n          x={100}\r\n          y={15}\r\n          // centerTitle\r\n          orientation=\"horizontal\"\r\n          gutter={5}\r\n          data={[\r\n            { name: \"Enjoyment\", symbol: { fill: blue } },\r\n            { name: \"Difficulty\", symbol: { fill: red } },\r\n          ]}\r\n        />\r\n        <VictoryLabel\r\n          text={assignment}\r\n          x={125}\r\n          y={10}\r\n          textAnchor=\"middle\"\r\n          style={{ fontSize: 5 }}\r\n        />\r\n        <VictoryAxis /* style={{ tickLabels: { angle: 0, fontSize: 5 } }} */ />\r\n\r\n        <VictoryAxis\r\n          dependentAxis={true}\r\n          domain={[0, 4]}\r\n          tickFormat={[1, 2, 3, 4, 5]}\r\n          // style={{ tickLabels: { fontSize: 8, padding: 5 } }}\r\n        />\r\n        <VictoryAxis\r\n          orientation={\"right\"}\r\n          dependentAxis={true}\r\n          domain={[0, 4]}\r\n          tickFormat={[1, 2, 3, 4, 5]}\r\n          // style={{ tickLabels: { fontSize: 8, padding: 5 } }}\r\n        />\r\n\r\n        <VictoryGroup offset={5}>\r\n          {showFunRating && (\r\n            <VictoryBar\r\n              style={{ data: { fill: \"#1687a7\" } }}\r\n              data={singleAssignmentData}\r\n              x={\"name\"}\r\n              y={\"funRating\"}\r\n            />\r\n          )}\r\n\r\n          {showDifficultyRating && (\r\n            <VictoryBar\r\n              style={{ data: { fill: \"#a21232\" } }}\r\n              data={singleAssignmentData}\r\n              x={\"name\"}\r\n              y={\"difficultyRating\"}\r\n            />\r\n          )}\r\n        </VictoryGroup>\r\n      </VictoryChart>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssignmentDetails;\r\n","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\Assignment.js",[],["69","70"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\StudentDetails.js",["71","72","73"],"import { useLocation, useParams } from \"react-router-dom\";\r\nimport {\r\n  VictoryChart,\r\n  VictoryGroup,\r\n  VictoryBar,\r\n  VictoryAxis,\r\n  VictoryLine,\r\n  VictoryLabel,\r\n  VictoryTooltip,\r\n  VictoryVoronoiContainer,\r\n  VictoryLegend,\r\n} from \"victory\";\r\nimport theme from \"../Themes/ThemeStudent\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n// import Student from \"../Components/Student\";\r\n// import RatingCheckboxForm from \"../Components/RatingCheckboxForm\";\r\nimport allStudentsData from \"../helperfunctions/helperFunctions\";\r\n\r\n\r\n\r\nconst StudentDetails = ({showFunRating,showDifficultyRating,showBarChart,showChartBtnDisplay}) => {\r\n  showChartBtnDisplay(true)\r\n\r\n  const red = \"#a21232\";\r\n  const blue = \"#1687a7\";\r\n  // console.log(location);\r\n  const { name } = useParams();\r\n  // console.log(useParams());\r\n// console.log(name, \"name in studentdetails\");\r\n  const student = allStudentsData.filter(\r\n    (student) => student.name === name\r\n  );\r\n\r\n  // const [student, setStudent] = useState(singleStudentData);\r\n\r\n  // useEffect(\r\n  //   () =>\r\n  //     setStudent(allStudentsData.filter((student) => student.name === name)),\r\n  //   [location, name]\r\n  // );\r\n\r\n  // const singleAssignmentData = allStudentsData.filter(\r\n  //   (student) => student.assignment === assignment\r\n  // );\r\n\r\n\r\n\r\n  console.log(student);\r\n  \r\n  // console.log(showBarChart);\r\n\r\n  // const handleChartChange = () => {\r\n  //   console.log(\"handleChartChange linechart\");\r\n  //   setShowBarChart((prev) => !prev);\r\n  // };\r\n  // console.log(\"hey\");\r\n// console.log(name, \"name in studentdetails bottom\");\r\n\r\n  return (\r\n    <div>\r\n      {/* <button onClick={handleChartChange}>handleChartChange </button> */}\r\n\r\n      {showBarChart ? (\r\n        <VictoryChart domainPadding={2} theme={theme}>\r\n          <VictoryLegend\r\n            x={100}\r\n            y={10}\r\n            // centerTitle\r\n            orientation=\"horizontal\"\r\n            gutter={5}\r\n            data={[\r\n              { name: \"Enjoyment\", symbol: { fill: blue } },\r\n              { name: \"Difficulty\", symbol: { fill: red } },\r\n            ]}\r\n          />\r\n          <VictoryLabel\r\n            text={name}\r\n            x={125}\r\n            y={5}\r\n            textAnchor=\"middle\"\r\n            style={{ fontSize: 5 }}\r\n          />\r\n          <VictoryAxis style={{ tickLabels: { angle: 70, fontSize: 2 } }} />\r\n\r\n          <VictoryAxis\r\n            dependentAxis={true}\r\n            domain={[0, 4]}\r\n            tickFormat={[1, 2, 3, 4, 5]}\r\n            style={{ ticks: { size: 1, padding: 0 } }}\r\n          />\r\n          <VictoryAxis\r\n            orientation={\"right\"}\r\n            dependentAxis={true}\r\n            domain={[0, 4]}\r\n            tickFormat={[1, 2, 3, 4, 5]}\r\n            style={{ ticks: { size: 1, padding: 0 } }}\r\n\r\n            // style={{ tickLabels: { fontSize: 8, padding: 5 } }}\r\n          />\r\n          <VictoryGroup offset={1}>\r\n            {showFunRating && (\r\n              <VictoryBar\r\n                labels={({ datum }) =>\r\n                  `Assignment: ${datum.assignment}, Fun: ${datum.funRating}`\r\n                }\r\n                labelComponent={<VictoryTooltip />}\r\n                style={{ data: { fill: blue } }}\r\n                data={student}\r\n                x={\"assignment\"}\r\n                y={\"funRating\"}\r\n              />\r\n            )}\r\n\r\n            {showDifficultyRating && (\r\n              <VictoryBar\r\n                labels={({ datum }) =>\r\n                  `Assignment: ${datum.assignment}, Difficulty: ${datum.difficultyRating}`\r\n                }\r\n                labelComponent={<VictoryTooltip />}\r\n                style={{ data: { fill: red } }}\r\n                data={student}\r\n                x={\"assignment\"}\r\n                y={\"difficultyRating\"}\r\n              />\r\n            )}\r\n          </VictoryGroup>\r\n        </VictoryChart>\r\n      ) : (\r\n        /*    =====================VictoryLine starts here========================= */\r\n        /*    =====================VictoryLine starts here========================= */\r\n        /*    =====================VictoryLine starts here========================= */\r\n        /*    =====================VictoryLine starts here========================= */\r\n\r\n        <VictoryChart\r\n          domainPadding={1}\r\n          theme={theme}\r\n          containerComponent={\r\n            <VictoryVoronoiContainer\r\n              labels={({ datum }) =>\r\n                `Assignment: ${datum.assignment} Fun: ${datum.funRating} Difficulty: ${datum.difficultyRating}`\r\n              }\r\n              labelComponent={<VictoryTooltip dy={0} constrainToVisibleArea />}\r\n            />\r\n          }>\r\n          <VictoryLegend\r\n            x={100}\r\n            y={10}\r\n            // centerTitle\r\n            orientation=\"horizontal\"\r\n            gutter={5}\r\n            data={[\r\n              { name: \"Enjoyment\", symbol: { fill: blue } },\r\n              { name: \"Difficulty\", symbol: { fill: red } },\r\n            ]}\r\n          />\r\n          <VictoryLabel\r\n            text={name}\r\n            x={125}\r\n            y={5}\r\n            textAnchor=\"middle\"\r\n            style={{ fontSize: 5 }}\r\n          />\r\n          <VictoryAxis style={{ tickLabels: { angle: 70, fontSize: 2 } }} />\r\n\r\n          <VictoryAxis\r\n            dependentAxis={true}\r\n            domain={[0, 4]}\r\n            tickFormat={[1, 2, 3, 4, 5]}\r\n            style={{ ticks: { size: 1, padding: 0 } }}\r\n          />\r\n          <VictoryAxis\r\n            orientation={\"right\"}\r\n            dependentAxis={true}\r\n            domain={[0, 4]}\r\n            tickFormat={[1, 2, 3, 4, 5]}\r\n            style={{ ticks: { size: 1, padding: 0 } }}\r\n          />\r\n\r\n          {/* <VictoryGroup offset={2} > */}\r\n          {showFunRating && (\r\n            <VictoryLine\r\n              style={{ data: { stroke: blue } }}\r\n              data={student}\r\n              x={\"assignment\"}\r\n              y={\"funRating\"}\r\n            />\r\n          )}\r\n\r\n          {showDifficultyRating && (\r\n            <VictoryLine\r\n              style={{ data: { stroke: red } }}\r\n              // colorScale={\"#a21232\"}\r\n              data={student}\r\n              x={\"assignment\"}\r\n              y={\"difficultyRating\"}\r\n            />\r\n          )}\r\n          {/* </VictoryGroup> */}\r\n        </VictoryChart>\r\n      )}\r\n     \r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentDetails;\r\n","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\Student.js",[],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Components\\AssignmentsForm.js",[],["74","75"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Themes\\ThemeAssignment.js",["76","77"],"import { assign } from \"lodash\";\r\n\r\n// *\r\n// * Colors\r\n// *\r\nconst yellow200 = \"#FFF59D\";\r\nconst deepOrange600 = \"#F4511E\";\r\nconst lime300 = \"#DCE775\";\r\nconst lightGreen500 = \"#8BC34A\";\r\nconst teal700 = \"#00796B\";\r\nconst cyan900 = \"#006064\";\r\nconst colors = [\r\n  deepOrange600,\r\n  yellow200,\r\n  lime300,\r\n  lightGreen500,\r\n  teal700,\r\n  cyan900,\r\n];\r\nconst blueGrey50 = \"#ECEFF1\";\r\nconst blueGrey300 = \"#90A4AE\";\r\nconst blueGrey700 = \"#455A64\";\r\nconst grey900 = \"#212121\";\r\n// *\r\n// * Typography\r\n// *\r\nconst sansSerif = \"'Helvetica Neue', 'Helvetica', sans-serif\";\r\nconst letterSpacing = \"normal\";\r\nconst fontSize = 4;\r\n// *\r\n// * Layout\r\n// *\r\n\r\n// padding= distance ticklabels? and graph axis\r\nconst padding = 2;\r\n// baseprops = lengtes graph zelf\r\nconst baseProps = {\r\n  width: 250,\r\n  height: 95,\r\n  padding: 15,\r\n};\r\n// *\r\n// * Labels\r\n// *\r\nconst baseLabelStyles = {\r\n  fontFamily: sansSerif,\r\n  fontSize,\r\n  letterSpacing,\r\n  padding,\r\n  fill: blueGrey700,\r\n  stroke: \"transparent\",\r\n  strokeWidth: 0,\r\n};\r\n\r\nconst centeredLabelStyles = assign({ textAnchor: \"middle\" }, baseLabelStyles);\r\n// *\r\n// * Strokes\r\n// *\r\nconst strokeDasharray = [\"25\", \"10\"];\r\nconst strokeLinecap = \"round\";\r\nconst strokeLinejoin = \"round\";\r\n\r\nconst theme = {\r\n  axis: assign(\r\n    {\r\n      style: {\r\n        // axis: {\r\n        //   fill: \"transparent\",\r\n        //   stroke: blueGrey300,\r\n        //   strokeWidth: 2,\r\n        //   strokeLinecap,\r\n        //   strokeLinejoin\r\n        // },\r\n        // axisLabel: assign({}, centeredLabelStyles, {\r\n        //   padding,\r\n        //   stroke: \"blue\"\r\n        // }),\r\n\r\n        grid: {\r\n          //   fill: \"none\",\r\n          stroke: blueGrey50,\r\n          strokeDasharray,\r\n          strokeLinecap,\r\n          //   strokeLinejoin,\r\n          pointerEvents: \"painted\",\r\n        },\r\n        /* size =  grootte van ticks streepjes*/\r\n        ticks: {\r\n          fill: \"transparent\",\r\n          size: 1,\r\n          stroke: blueGrey300,\r\n          strokeWidth: 1,\r\n          //   strokeLinecap,\r\n          //   strokeLinejoin\r\n        },\r\n        tickLabels: assign({}, baseLabelStyles, {\r\n          fill: blueGrey700,\r\n        }),\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n\r\n  bar: assign(\r\n    {\r\n      style: {\r\n        data: {\r\n          // fill: \"#1687a7\",\r\n          // padding,\r\n          strokeWidth: 0,\r\n        },\r\n        // labels: baseLabelStyles,\r\n      },\r\n    },\r\n    // baseProps\r\n  ),\r\n\r\n  chart: baseProps,\r\n  //   errorbar: assign(\r\n  //     {\r\n  //       borderWidth: 1,\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: \"transparent\",\r\n  //           opacity: 1,\r\n  //           stroke: blueGrey700,\r\n  //           strokeWidth: 4\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   group: assign(\r\n  //     {\r\n  //       colorScale: colors\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   histogram: assign(\r\n  //     {\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: blueGrey700,\r\n  //           stroke: grey900,\r\n  //           strokeWidth: 2\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  legend: {\r\n    colorScale: colors,\r\n    gutter: 10,\r\n    orientation: \"vertical\",\r\n    titleOrientation: \"top\",\r\n    style: {\r\n      data: {\r\n        type: \"square\",\r\n      },\r\n      labels: baseLabelStyles,\r\n      title: assign({}, baseLabelStyles, { padding: 5 }),\r\n    },\r\n  },\r\n  line: assign(\r\n    {\r\n      style: {\r\n        data: {\r\n          fill: \"transparent\",\r\n          opacity: 1,\r\n          stroke: blueGrey700,\r\n          strokeWidth: 2,\r\n        },\r\n        labels: baseLabelStyles,\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n  //   pie: assign(\r\n  //     {\r\n  //       colorScale: colors,\r\n  //       style: {\r\n  //         data: {\r\n  //           padding,\r\n  //           stroke: blueGrey50,\r\n  //           strokeWidth: 1\r\n  //         },\r\n  //         labels: assign({}, baseLabelStyles, { padding: 20 })\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   scatter: assign(\r\n  //     {\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: blueGrey700,\r\n  //           opacity: 1,\r\n  //           stroke: \"transparent\",\r\n  //           strokeWidth: 0\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   stack: assign(\r\n  //     {\r\n  //       colorScale: colors\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  tooltip: {\r\n    style: assign({}, baseLabelStyles, { padding: 0, pointerEvents: \"none\" }),\r\n    flyoutStyle: {\r\n      stroke: grey900,\r\n      strokeWidth: 1,\r\n      fill: \"#f0f0f0\",\r\n      pointerEvents: \"none\",\r\n    },\r\n    flyoutPadding: 5,\r\n    cornerRadius: 5,\r\n    pointerLength: 10,\r\n  },\r\n  //   voronoi: assign(\r\n  //     {\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: \"transparent\",\r\n  //           stroke: \"transparent\",\r\n  //           strokeWidth: 0\r\n  //         },\r\n  //         labels: assign({}, baseLabelStyles, { padding: 5, pointerEvents: \"none\" }),\r\n  //         flyout: {\r\n  //           stroke: grey900,\r\n  //           strokeWidth: 1,\r\n  //           fill: \"#f0f0f0\",\r\n  //           pointerEvents: \"none\"\r\n  //         }\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   )\r\n};\r\n\r\nexport default theme;\r\n","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Themes\\ThemeStudent.js",["78"],"import { assign } from \"lodash\";\r\n\r\n// *\r\n// * Colors\r\n// *\r\n// const yellow200 = \"#FFF59D\";\r\n// const deepOrange600 = \"#F4511E\";\r\n// const lime300 = \"#DCE775\";\r\n// const lightGreen500 = \"#8BC34A\";\r\n// const teal700 = \"#00796B\";\r\n// const cyan900 = \"#006064\";\r\n// const colors = [deepOrange600, yellow200, lime300, lightGreen500, teal700, cyan900];\r\nconst blueGrey50 = \"#ECEFF1\";\r\nconst blueGrey300 = \"#90A4AE\";\r\nconst blueGrey700 = \"#455A64\";\r\nconst grey900 = \"#212121\";\r\n\r\n// *\r\n// * Typography\r\n// *\r\nconst sansSerif = \"'Helvetica Neue', 'Helvetica', sans-serif\";\r\nconst letterSpacing = \"normal\";\r\nconst fontSize = 3;\r\n// *\r\n// * Layout\r\n// *\r\n\r\n// padding= distance ticklabels? and graph axis\r\nconst padding = 1;\r\n// baseprops = lengtes graph zelf\r\nconst baseProps = {\r\n  width: 250,\r\n  height: 95,\r\n  padding: 15,\r\n};\r\n// *\r\n// * Labels\r\n// *\r\nconst baseLabelStyles = {\r\n  fontFamily: sansSerif,\r\n  fontSize,\r\n  letterSpacing,\r\n  padding,\r\n  fill: blueGrey700,\r\n  stroke: \"transparent\",\r\n  strokeWidth: 0,\r\n};\r\n\r\nconst centeredLabelStyles = assign({ textAnchor: \"middle\" }, baseLabelStyles);\r\n// *\r\n// * Strokes\r\n// *\r\nconst strokeDasharray = \"10\";\r\n// const strokeLinecap = \"round\";\r\n// const strokeLinejoin = \"round\";\r\n\r\nconst theme = {\r\n  axis: assign(\r\n    {\r\n      style: {\r\n        // axis: {\r\n        //   fill: \"transparent\",\r\n        //   stroke: blueGrey300,\r\n        //   strokeWidth: 2,\r\n        //   strokeLinecap,\r\n        //   strokeLinejoin\r\n        // },\r\n        // axisLabel: assign({}, centeredLabelStyles, {\r\n        //   padding,\r\n        //   stroke: \"blue\"\r\n        // }),\r\n\r\n        grid: {\r\n          fill: \"none\",\r\n          stroke: blueGrey50,\r\n          strokeDasharray,\r\n          // strokeLinecap,\r\n          //   strokeLinejoin,\r\n          pointerEvents: \"painted\",\r\n        },\r\n        /* size =  grootte van ticks streepjes*/\r\n        ticks: {\r\n          fill: \"transparent\",\r\n          size: 8,\r\n          stroke: blueGrey300,\r\n          strokeWidth: 2,\r\n          padding: -3,\r\n          // strokeLinecap,\r\n          // strokeLinejoin\r\n        },\r\n        tickLabels: assign({}, baseLabelStyles, {\r\n          fill: blueGrey700,\r\n        }),\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n\r\n  bar: assign(\r\n    {\r\n      style: {\r\n        data: {\r\n          fill: blueGrey700,\r\n          padding,\r\n          strokeWidth: 0,\r\n        },\r\n        labels: baseLabelStyles,\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n\r\n  chart: baseProps,\r\n  //   errorbar: assign(\r\n  //     {\r\n  //       borderWidth: 1,\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: \"transparent\",\r\n  //           opacity: 1,\r\n  //           stroke: blueGrey700,\r\n  //           strokeWidth: 4\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   group: assign(\r\n  //     {\r\n  //       colorScale: colors\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   histogram: assign(\r\n  //     {\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: blueGrey700,\r\n  //           stroke: grey900,\r\n  //           strokeWidth: 2\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  legend: {\r\n    // colorScale: colors,\r\n    // gutter: 10,\r\n    orientation: \"vertical\",\r\n    titleOrientation: \"top\",\r\n    style: {\r\n      data: {\r\n        type: \"square\",\r\n        padding: 1,\r\n      },\r\n      labels: baseLabelStyles,\r\n      title: assign({}, baseLabelStyles, { padding: 3 }),\r\n    },\r\n  },\r\n  line: assign(\r\n    {\r\n      style: {\r\n        data: {\r\n          fill: \"transparent\",\r\n          opacity: 1,\r\n          stroke: blueGrey700,\r\n          strokeWidth: 0.3,\r\n        },\r\n        labels: baseLabelStyles,\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n  //   pie: assign(\r\n  //     {\r\n  //       colorScale: colors,\r\n  //       style: {\r\n  //         data: {\r\n  //           padding,\r\n  //           stroke: blueGrey50,\r\n  //           strokeWidth: 1\r\n  //         },\r\n  //         labels: assign({}, baseLabelStyles, { padding: 20 })\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   scatter: assign(\r\n  //     {\r\n  //       style: {\r\n  //         data: {\r\n  //           fill: blueGrey700,\r\n  //           opacity: 1,\r\n  //           stroke: \"transparent\",\r\n  //           strokeWidth: 0\r\n  //         },\r\n  //         labels: baseLabelStyles\r\n  //       }\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n  //   stack: assign(\r\n  //     {\r\n  //       colorScale: colors\r\n  //     },\r\n  //     baseProps\r\n  //   ),\r\n\r\n  tooltip: {\r\n    flyoutStyle: {\r\n      stroke: grey900,\r\n      strokeWidth: 0.1,\r\n      fill: \"#f0f0f0\",\r\n      pointerEvents: \"none\",\r\n      opacity: 0.6,\r\n    },\r\n    strokeWidth: 0.1,\r\n    center: { x: 125, y: 50 },\r\n    pointerOrientation: \"bottom\",\r\n    flyoutWidth: 80,\r\n    flyoutHeight: 20,\r\n    pointerWidth: 50,\r\n    cornerRadius: 0,\r\n  },\r\n  voronoi: assign(\r\n    {\r\n      style: {\r\n        data: {\r\n          fill: \"transparent\",\r\n          stroke: \"transparent\",\r\n          strokeWidth: 1,\r\n        },\r\n\r\n        labels: assign({}, baseLabelStyles, {\r\n          padding: 1,\r\n          pointerEvents: \"none\",\r\n        }),\r\n        flyout: {\r\n          stroke: grey900,\r\n          strokeWidth: 0.1,\r\n          fill: \"#f0f0f0\",\r\n          pointerEvents: \"none\",\r\n        },\r\n      },\r\n    },\r\n    baseProps\r\n  ),\r\n};\r\n\r\nexport default theme;\r\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":20,"nodeType":"85","messageId":"86","endLine":8,"endColumn":29},{"ruleId":"83","severity":1,"message":"87","line":14,"column":9,"nodeType":"85","messageId":"86","endLine":14,"endColumn":18},{"ruleId":"83","severity":1,"message":"88","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":18},{"ruleId":"83","severity":1,"message":"89","line":14,"column":3,"nodeType":"85","messageId":"86","endLine":14,"endColumn":14},{"ruleId":"83","severity":1,"message":"90","line":15,"column":3,"nodeType":"85","messageId":"86","endLine":15,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":16,"column":3,"nodeType":"85","messageId":"86","endLine":16,"endColumn":17},{"ruleId":"79","replacedBy":"92"},{"ruleId":"81","replacedBy":"93"},{"ruleId":"83","severity":1,"message":"94","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":15,"column":10,"nodeType":"85","messageId":"86","endLine":15,"endColumn":19},{"ruleId":"83","severity":1,"message":"88","line":15,"column":21,"nodeType":"85","messageId":"86","endLine":15,"endColumn":29},{"ruleId":"79","replacedBy":"95"},{"ruleId":"81","replacedBy":"96"},{"ruleId":"83","severity":1,"message":"97","line":55,"column":7,"nodeType":"85","messageId":"86","endLine":55,"endColumn":26},{"ruleId":"83","severity":1,"message":"98","line":61,"column":7,"nodeType":"85","messageId":"86","endLine":61,"endColumn":21},{"ruleId":"83","severity":1,"message":"97","line":49,"column":7,"nodeType":"85","messageId":"86","endLine":49,"endColumn":26},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'useState' is defined but never used.","'VictoryLine' is defined but never used.","'VictoryVoronoiContainer' is defined but never used.","'VictoryTooltip' is defined but never used.",["99"],["100"],"'useLocation' is defined but never used.",["99"],["100"],"'centeredLabelStyles' is assigned a value but never used.","'strokeLinejoin' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]