[{"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\index.js":"1","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\App.js":"2","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\StudentsOverview.js":"3","D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\GraphContainer.js":"4"},{"size":207,"mtime":1611768258613,"results":"5","hashOfConfig":"6"},{"size":347,"mtime":1611866726780,"results":"7","hashOfConfig":"6"},{"size":956,"mtime":1611867425586,"results":"8","hashOfConfig":"6"},{"size":3403,"mtime":1611868448058,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"61gl87",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\index.js",[],["20","21"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\App.js",["22"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\StudentsOverview.js",["23","24"],"D:\\WincMainRemote\\RvanBeveren_student-dashboard\\student-db\\src\\Containers\\GraphContainer.js",["25"],"import studentDB from \"../mock-data/students.json\";\r\nimport { useState } from \"react\";\r\nimport StudentsOverview from \"../Containers/StudentsOverview\";\r\n\r\nimport { VictoryChart, VictoryGroup, VictoryBar, VictoryAxis } from \"victory\";\r\n\r\nfunction GraphContainer() {\r\n  const getAvgRating = (array, rating) => {\r\n    //this calculates average of value rating for key assignment of format  [{key: rating, assignment: value}, {object}, {object}]\r\n    //****kan gebruikt worden voor avg per student met extra parameter???\r\n    // filters by assignment and create non-duplicate array from assignment\r\n    const filteredByAssignment = array.map((student) => student.assignment);\r\n    // console.log(filteredByAssignment);\r\n    const uniqueAssignments = [\r\n      ...new Set(filteredByAssignment),\r\n    ]; /* .slice(0, 10) */\r\n    // console.log(uniqueAssignments.slice(0.10));\r\n\r\n    // map new Set and create numrating of corresponding assignment\r\n    const sortedByAssignment = uniqueAssignments.map((assignment) => {\r\n      const ratingList = array\r\n        .filter((student) => student.assignment === assignment)\r\n        .map((student) => student[rating]);\r\n      return {\r\n        assignment: assignment,\r\n        arrayOfRatings: ratingList,\r\n      };\r\n    });\r\n    //calc avg for arrayOfRating: ratingList  in previous aray[assignment, [1, 2, 3, 4]] = [assignment, avg(2.5)]\r\n    const reducer = (acc, curr) => acc + curr;\r\n    const avgRating = sortedByAssignment.map((item) => {\r\n      const avgNumber =\r\n        item.arrayOfRatings.reduce(reducer) / item.arrayOfRatings.length; //of gewoon delen door 10 :)\r\n      return {\r\n        assignment: item.assignment,\r\n        avgRating: avgNumber,\r\n      };\r\n    });\r\n    return avgRating;\r\n  };\r\n  console.log(getAvgRating(studentDB, \"funRating\"));\r\n  const initialFunState = getAvgRating(studentDB, \"funRating\");\r\n  const initialDifficultyState = getAvgRating(studentDB, \"difficultyRating\");\r\n  //   initialstate should be a getAvgRating(studentDB, \"funRating\")\r\n  const [fun, setFun] = useState(initialFunState);\r\n  const [difficulty, setDifficulty] = useState(initialDifficultyState);\r\n  const [Axis, setAxis] = useState(\"avgRating\");\r\n\r\n  const change = () => {\r\n    const evelyn = studentDB.filter((student) => student.name === \"Evelyn\");\r\n    console.log(evelyn, \"evelyn\");\r\n    setFun(evelyn);\r\n    setDifficulty(evelyn);\r\n    setAxis(\"funRating\");\r\n  };\r\n  //   ticklabels is ticks, padding = distance from axis, tickformat = how ticks are displayed, domain= range of ticks\r\n  return (\r\n    <>\r\n      <button onClick={() => change()}>Eveleyn</button>\r\n      <h1>GraphContainer</h1>\r\n\r\n      <VictoryChart domainPadding={5}>\r\n        <VictoryAxis style={{ tickLabels: { angle: 80, fontSize: 5 } }} />\r\n\r\n        <VictoryAxis\r\n          dependentAxis={true}\r\n          domain={[0, 4]}\r\n          tickFormat={[1, 2, 3, 4, 5]}\r\n          style={{ tickLabels: { fontSize: 8, padding: 5 } }}\r\n        />\r\n\r\n        <VictoryGroup offset={2} colorScale={\"qualitative\"}>\r\n          <VictoryBar\r\n            animate={{ duration: 1000 }}\r\n            data={fun}\r\n            x={\"assignment\"}\r\n            y={Axis}\r\n          />\r\n\r\n          {/* <VictoryBar data={difficulty} x={\"assignment\"} y={\"avgRating\"} /> */}\r\n        </VictoryGroup>\r\n      </VictoryChart>\r\n      <StudentsOverview setFun={setFun} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GraphContainer;\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":3,"column":8,"nodeType":"32","messageId":"33","endLine":3,"endColumn":24},{"ruleId":"30","severity":1,"message":"34","line":1,"column":10,"nodeType":"32","messageId":"33","endLine":1,"endColumn":20},{"ruleId":"30","severity":1,"message":"35","line":6,"column":9,"nodeType":"32","messageId":"33","endLine":6,"endColumn":15},{"ruleId":"30","severity":1,"message":"36","line":46,"column":10,"nodeType":"32","messageId":"33","endLine":46,"endColumn":20},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'StudentsOverview' is defined but never used.","Identifier","unusedVar","'VictoryBar' is defined but never used.","'evelyn' is assigned a value but never used.","'difficulty' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]